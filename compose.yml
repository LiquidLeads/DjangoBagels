services:
#★ Linux Host/Admin Server
  server:
    image:            ubuntu:22.04
    container_name:   server
    hostname:         lin-server
    privileged:       true
    build:
      context:        ./Technovine/backend/server
      dockerfile:     lin-server.dockerfile
    command: [
        'bash'
      ]
    cap_add:
      - ALL
    networks:
      - backend
      - frontend
      - admin
    links:
      - "db:database"
      - "tailscale:vpn"
      - "webhost:nginx"
      - "site:technovine"
    ports:
      - 22
      - 80
      - 443
      - 8080
    volumes:
      - type: 			bind
        source:       "Z:\\Technovine\\server\\data"
        target:       "/volumes/server-data"
        read_only:    false
      - type: 			bind
        source:       "Z:\\Technovine\\server\\storage"
        target:       "/volumes/server-storage"
        read_only:    false
      - type: 			bind
        source:       "Z:\\Technovine\\site\\data"
        target:       "/volumes/site-data"
        read_only:    false
      - type: 			bind
        source:       "Z:\\Technovine\\site\\storage"
        target:       "/volumes/site-storage"
        read_only:    false
      - type: 			bind
        source:       "Z:\\Technovine\\db\\data"
        target:       "/volumes/db-data"
        read_only:    false
  
#★ Tailscale VPN Mesh
  tailscale:
    image:            tailscale/tailscale:latest
    container_name:   tailscale
    hostname:         tailscale
    privileged:       true
    network_mode:     "host"
    cap_add:
      - net_admin
      - sys_module
    command: [
        'tailscaled'
      ]
    restart: unless-stopped
    volumes:
      - "/opt/appdata/tailscale/var_lib:/var/lib"
      - "/dev/net/tun:/dev/net/tun" 

#★ Technovine Site Container
  site:
    image:            newspectrum/technovine:latest
    container_name:   technovine
    hostname:         technovine
    privileged:       false
    build:
      context:        /.devcontainer
      dockerfile:     technovine.dockerfile
    depends_on:
      - db
      - webhost
    networks:
      - frontend
      - admin
    volumes:
      - type: 			bind
        source:       "Z:\\Technovine\\site\\data"
        target:       "/volumes/site-data"
        read_only:    false
      - type: 			bind
        source:       "Z:\\Technovine\\site\\storage"
        target:     	"/volumes/site-storage"
        read_only:  	false
      - type: 			bind
        source:     	"Z:\\Technovine\\db\\data"
        target:     	"/volumes/db-data"
        read_only:  	false

#★ MySQL Database
  db:
    image: 						"mysql:latest"
    container_name: 	database
    hostname: 				techovine-db
    privileged:       false
    build:
      context:        /.devcontainer
      dockerfile:     database.dockerfile
    restart: 					always
    command: [
        '--default-authentication-plugin=mysql_native_password'
      ]
    depends_on:
      - webhost
      - server
    networks:
      - backend
      - admin
    secrets:
      - db-password
    environment:
      - MYSQL_DATABASE=db
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 3306

#★ NGINX Webhost
  webhost:
    image: 						nginx:latest
    container_name: 	nginx
    hostname:         techovine-wh
    privileged:       false
    build:
      context:      /Technovine/backend/nginx
      dockerfile:   nginx.dockerfile
    volumes:
      - type: 			bind
        source:     	"./proxy/nginx.conf"
        target:     	"/etc/nginx/conf.d/default.conf"
        read_only:  	true
      - type: 			bind
        source:     	"Z:\\Technovine\\site\\data"
        target:     	"/volumes/site-data"
        read_only:  	false
      - type: 			bind
        source:     	"Z:\\Technovine\\site\\storage"
        target:     	"/volumes/site-storage"
        read_only:  	true
    networks:
      - backend
      - frontend
      - admin
    ports:
      - 80

networks:
  backend: {}
  frontend: {}
  admin: {}

secrets:
  db-password:
    file: 						"./Technovine/backend/db"
#
#


# .devcontainer/docker-compose.devcontainer.yml
# you would just change the following line in devcontainer.json

# #+  Server Data & Storage Volumes
# #-      Name: Server-Data
#       - type:       bind
#         source:     "Z:\\Technovine\\server\\data"
#         target:     /volumes/server-data
#         read_only:  false
# #-      Name: Server-Storage
#       - type:       bind
#         source:     "Z:\\Technovine\\server\\storage"
#         target:     /volumes/server-storage
#         read_only:  false
# #+  Site Data & Storage Volumes
# #-      Name: Site-Data
#       - type:       bind
#         source:     "Z:\\Technovine\\site\\data"
#         target:     /volumes/site-data
#         read_only:  false
# #-      Name: Site-Storage
#       - type:       bind
#         source:     "Z:\\Technovine\\site\\storage"
#         target:     /volumes/site-storage
#         read_only:  false
# #+  MySQL Database Data Volume
# #-      Name: DB-Data
#       - type:       bind
#         source:     "Z:\\Technovine\\db\\data"
#         target:     /volumes/db-data
#         read_only:  false



